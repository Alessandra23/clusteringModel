data = model_data,
parameters.to.save = model_parameters,
model.file = textConnection(model_code)
)
# Results and output of the simulated example
plot(model_run)
print(model_run)
# Plot the posterior cluster membership
qplot(model_run$BUGSoutput$median$gen, dat$df$gen) +
geom_jitter(width = 0.1, height = 0.1)
qplot(model_run$BUGSoutput$median$env, dat$df$env) +
geom_jitter(width = 0.1, height = 0.1)
qplot(model_run$BUGSoutput$median$vari, dat$df$var) +
geom_jitter(width = 0.1, height = 0.1)
# Overall predictions
qplot(model_run$BUGSoutput$median$mu, dat$df$y) + geom_abline() + theme_light()
# Prediction of genotype effects
qplot(model_run$BUGSoutput$median$g, dat$g) + geom_abline() + theme_light()
# Prediction of environment effects
qplot(model_run$BUGSoutput$median$e, dat$e) + geom_abline() + theme_light()
# Prediction of var effects
qplot(model_run$BUGSoutput$median$vari, dat$v) + geom_abline() + theme_light()
# Prediction of var effects
qplot(model_run$BUGSoutput$median$v, dat$v) + geom_abline() + theme_light()
rm(list = ls())
genData <- function(N, G, I, muT, sigma, sg, se, st){
g <- rnorm(I, 0, sg)
e <- rnorm(G, 0, se)
gen <- rep(1:I, each = N/I)
# cluster membership
env <- sample(1:G, size = N, replace = TRUE)
# generate mean of the model
mu_y <- g[gen] + e[env]
y <- rnorm(N, mu_y, sigma)
t <- rnorm(N, muT[env], st)
df <- data.frame(y = y, env = env, gen = gen, t = t)
return(list(df = df, g = g, e = e))
}
G <- 3
N <- 100
muT <- c(-5, 10, 30)
sigma <- 1
sg <- 10
se <- 10
st <- 1
I <- 5
set.seed(02)
dat <- genData(N = N, G = G, muT = muT, sigma = sigma, I = I, sg = sg, se = se, st = st)
hist(dat$df$t, breaks = 30, freq = FALSE)
for (g in 1:G) curve(dnorm(x, mean = muT[g], sd = st)/G, col = g, add = TRUE)
model_code <- '
model {
# Likelihood
for (i in 1:N) {
# Model for phenotype
y[i] ~ dnorm(mu[i], sigma^-2)
mu[i] = g[gen[i]] + e[env[i]] # Note that env here is a parameter
# but gen is not
# Clustering model
env[i] ~ dcat(pi[1:G])
# Continuous environmental variable
t[i] ~ dnorm(mu_env[env[i]], st^-2)
}
# Priors
# Prior on cluster membership
pi ~ ddirch(alpha)
for (g in 1:G) {
mu_env_raw[g] ~ dnorm(0, 100^-2)
}
# Make sure these are in order to avoid label switching
mu_env <- sort(mu_env_raw[1:G])
# Prior on genotype effect
for(i in 1:I) {
g[i] ~ dnorm(0, sigma_g^-2) # Prior on genotype effect
}
for(i in 1:G) {
e[i] ~ dnorm(0, sigma_e^-2) # Prior on genotype effect
}
sigma ~ dt(0, 10^-2, 1)T(0,)
st ~ dt(0, 10^-2, 1)T(0,)
sigma_e ~ dt(0, 10^-2, 1)T(0,)
sigma_g ~ dt(0, 10^-2, 1)T(0,)
}
'
# Set up the data
model_data <- list(N = N, y = dat$df$y, G = G, I = I, gen = dat$df$gen,
t = dat$df$t, alpha = rep(1,G))
# Choose the parameters to watch
model_parameters <- c("g", "e", "env", "pi", "mu_env", "mu", "sigma", "st")
# Run the model
model_run <- jags(
data = model_data,
parameters.to.save = model_parameters,
model.file = textConnection(model_code)
)
# Results and output of the simulated example
plot(model_run)
rm(list = ls())
genData <- function(N, G1, G2, muG, muE, sg, se, sgroup, sigma){
g <- rnorm(G1, 0, sg)
e <- rnorm(G2, 0, se)
# clusters
gen <- sample(1:G1, size = N, replace = TRUE)
env <- sample(1:G2, size = N, replace = TRUE)
# generate mean of the model
mu_y <- g[gen] + e[env]
y <- rnorm(N, mu_y, sigma)
g_group <- rnorm(N, muG[gen], sgroup)
e_group <- rnorm(N, muE[env], sgroup)
df <- data.frame(y = y, env = env, gen = gen, g_group = g_group, e_group = e_group)
return(list(df = df,
g = g,
e = e))
}
G1 <- 3
G2 <- 3
N <- 200
muG <- c(-5, 10, 30)
muE <- c(-10, 0, 10)
sg <- 1
se <- 1
sgroup <-  1
sigma <- 1
set.seed(02)
dat <- genData(N = N, G1 = G1, G2 = G2, muG = muG, muE = muE, sg = sg, se = se, sgroup = sgroup, sigma = sigma)
#plot env clustering
ggplot(dat$df, aes(x = e_group)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
stat_function(fun = function(x) dnorm(x, mean = muE[1])/G2, color = "steelblue",size = 0.7) +
stat_function(fun = function(x) dnorm(x, mean = muE[2])/G2, color = "firebrick",size = 0.7) +
stat_function(fun = function(x) dnorm(x, mean = muE[3])/G2, color = "chartreuse4",size = 0.7) +
theme_bw()
#plot gen clustering
ggplot(dat$df, aes(x = g_group)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
stat_function(fun = function(x) dnorm(x, mean = muG[1])/G1, color = "steelblue",size = 0.7) +
stat_function(fun = function(x) dnorm(x, mean = muG[2])/G1, color = "firebrick",size = 0.7) +
stat_function(fun = function(x) dnorm(x, mean = muG[3])/G1, color = "chartreuse4",size = 0.7) +
theme_bw()
#plot y
ggplot(dat$df, aes(x = y)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
theme_bw()
model_code <- '
model {
# Likelihood
for (i in 1:N) {
# Model for phenotype
y[i] ~ dnorm(mu[i], sigma^-2)
mu[i] = g[gen[i]] + e[env[i]]
# Clustering model
gen[i] ~ dcat(piG[1:G1])
env[i] ~ dcat(piE[1:G2])
# Continuous genotopyc variable
g_group[i] ~ dnorm(mu_gen[gen[i]], sgroup^-2)
# Continuous environmental variable
e_group[i] ~ dnorm(mu_env[env[i]], sgroup^-2)
}
# Priors
# Prior on clusters membership
piG ~ ddirch(alphaG)
piE ~ ddirch(alphaE)
for (g in 1:G1) {
mu_gen_raw[g] ~ dnorm(0, 100^-2)
}
# Make sure these are in order to avoid label switching
mu_gen <- sort(mu_gen_raw[1:G1])
for (g in 1:G2) {
mu_env_raw[g] ~ dnorm(0, 100^-2)
}
# Make sure these are in order to avoid label switching
mu_env <- sort(mu_env_raw[1:G2])
# Prior on genotype effect
for(i in 1:G1) {
g[i] ~ dnorm(0, sigma_g^-2) # Prior on genotype effect
}
for(i in 1:G2) {
e[i] ~ dnorm(0, sigma_e^-2) # Prior on genotype effect
}
sigma ~ dt(0, 10^-2, 1)T(0,)
sgroup ~ dt(0, 10^-2, 1)T(0,)
sigma_e ~ dt(0, 10^-2, 1)T(0,)
sigma_g ~ dt(0, 10^-2, 1)T(0,)
}
'
# Set up the data
model_data <- list(N = N, y = dat$df$y, G1 = G1, G2 = G2, gen = dat$df$gen, env = dat$df$enf,
g_group = dat$df$g_group, e_group = dat$df$e_group, alphaG = rep(1,G1),
alphaE = rep(1,G2))
# Choose the parameters to watch
model_parameters <- c("g", "e", "gen", "env", "piG", "piE", "mu_env", "mu_gen", "mu", "sigma", "sgroup")
# Run the model
model_run <- jags(
data = model_data,
parameters.to.save = model_parameters,
model.file = textConnection(model_code)
)
# Results and output of the simulated example
plot(model_run)
# Plot the posterior cluster membership
qplot(model_run$BUGSoutput$median$gen, dat$df$gen) +
geom_jitter(width = 0.1, height = 0.1)
qplot(model_run$BUGSoutput$median$env, dat$df$env) +
geom_jitter(width = 0.1, height = 0.1)
# Plot the posterior cluster membership
qplot(model_run$BUGSoutput$median$gen, dat$df$gen) +
geom_jitter(width = 0.1, height = 0.1) +
theme_light()
qplot(model_run$BUGSoutput$median$env, dat$df$env) +
geom_jitter(width = 0.1, height = 0.1) +
theme_light()
# Overall predictions
qplot(model_run$BUGSoutput$median$mu, dat$df$y) + geom_abline() + theme_light()
# Prediction of genotype effects
qplot(model_run$BUGSoutput$median$g, dat$g) + geom_abline() + theme_light()
# Prediction of environment effects
qplot(model_run$BUGSoutput$median$e, dat$e) + geom_abline() + theme_light()
rm(list = ls())
genData <- function(N, G1, G2, G3, muG, muE, muV, sg, se, sv, sgroup, sigma){
g <- rnorm(G1, 0, sg)
e <- rnorm(G2, 0, se)
v <- rnorm(G3, 0, sv)
# clusters
gen <- sample(1:G1, size = N, replace = TRUE)
env <- sample(1:G2, size = N, replace = TRUE)
var <- sample(1:G3, size = N, replace = TRUE)
# generate mean of the model
mu_y <- g[gen] + e[env] + v[var]
y <- rnorm(N, mu_y, sigma)
g_group <- rnorm(N, muG[gen], sgroup)
e_group <- rnorm(N, muE[env], sgroup)
v_group <- rnorm(N, muV[var], sgroup)
df <- data.frame(y = y, env = env, gen = gen, var = var, g_group = g_group, e_group = e_group, v_group = v_group)
return(list(df = df,
g = g,
e = e,
v = v))
}
G1 <- 3
G2 <- 2
G3 <- 4
N <- 400
muG <- c(-5, 10, 30)
muE <- c(-10, 0, 10)
muV <- c(0, 20, 40, 60)
sg <- 1
se <- 1
sv <- 1
sgroup <-  1
sigma <- 1
set.seed(02)
dat <- genData(N = N, G1 = G1, G2 = G2, G3 = G3, muG = muG, muE = muE,muV = muV,
sg = sg, se = se, sv = sv, sgroup = sgroup, sigma = sigma)
dat$df
#plot env clustering
ggplot(dat$df, aes(x = e_group)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
stat_function(fun = function(x) dnorm(x, mean = muE[1])/G2, color = "steelblue",size = 0.7) +
stat_function(fun = function(x) dnorm(x, mean = muE[2])/G2, color = "firebrick",size = 0.7) +
stat_function(fun = function(x) dnorm(x, mean = muE[3])/G2, color = "chartreuse4",size = 0.7) +
theme_bw()
#plot gen clustering
ggplot(dat$df, aes(x = g_group)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
stat_function(fun = function(x) dnorm(x, mean = muG[1])/G1, color = "steelblue",size = 0.7) +
stat_function(fun = function(x) dnorm(x, mean = muG[2])/G1, color = "firebrick",size = 0.7) +
stat_function(fun = function(x) dnorm(x, mean = muG[3])/G1, color = "chartreuse4",size = 0.7) +
theme_bw()
#plot var clustering
ggplot(dat$df, aes(x = v_group)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
stat_function(fun = function(x) dnorm(x, mean = muV[1])/G3, color = "steelblue",size = 0.7) +
stat_function(fun = function(x) dnorm(x, mean = muV[2])/G3, color = "firebrick",size = 0.7) +
stat_function(fun = function(x) dnorm(x, mean = muV[3])/G3, color = "chartreuse4",size = 0.7) +
stat_function(fun = function(x) dnorm(x, mean = muV[4])/G3, color = "chartreuse4",size = 0.7) +
theme_bw()
#plot y
ggplot(dat$df, aes(x = y)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
theme_bw()
model_code <- '
model {
# Likelihood
for (i in 1:N) {
# Model for phenotype
y[i] ~ dnorm(mu[i], sigma^-2)
mu[i] = g[gen[i]] + e[env[i]] + v[vari[i]]
# Clustering model
gen[i] ~ dcat(piG[1:G1])
env[i] ~ dcat(piE[1:G2])
vari[i] ~ dcat(piV[1:G3])
# Continuous genotopyc variable
g_group[i] ~ dnorm(mu_gen[gen[i]], sgroup^-2)
# Continuous environmental variable
e_group[i] ~ dnorm(mu_env[env[i]], sgroup^-2)
# Continuous  variable
v_group[i] ~ dnorm(mu_var[vari[i]], sgroup^-2)
}
# Priors
# Prior on clusters membership
piG ~ ddirch(alphaG)
piE ~ ddirch(alphaE)
piV ~ ddirch(alphaV)
for (g in 1:G1) {
mu_gen_raw[g] ~ dnorm(0, 100^-2)
}
# Make sure these are in order to avoid label switching
mu_gen <- sort(mu_gen_raw[1:G1])
for (g in 1:G2) {
mu_env_raw[g] ~ dnorm(0, 100^-2)
}
# Make sure these are in order to avoid label switching
mu_env <- sort(mu_env_raw[1:G2])
for (g in 1:G3) {
mu_var_raw[g] ~ dnorm(0, 100^-2)
}
# Make sure these are in order to avoid label switching
mu_var <- sort(mu_var_raw[1:G3])
# Prior on genotype effect
for(i in 1:G1) {
g[i] ~ dnorm(0, sigma_g^-2) # Prior on genotype effect
}
for(i in 1:G2) {
e[i] ~ dnorm(0, sigma_e^-2) # Prior on genotype effect
}
for(i in 1:G3) {
v[i] ~ dnorm(0, sigma_v^-2) # Prior on genotype effect
}
sigma ~ dt(0, 10^-2, 1)T(0,)
sgroup ~ dt(0, 10^-2, 1)T(0,)
sigma_e ~ dt(0, 10^-2, 1)T(0,)
sigma_g ~ dt(0, 10^-2, 1)T(0,)
sigma_v ~ dt(0, 10^-2, 1)T(0,)
}
'
# Set up the data
model_data <- list(N = N, y = dat$df$y, G1 = G1, G2 = G2, G3 = G3,
gen = dat$df$gen, env = dat$df$env, vari = dat$df$var,
g_group = dat$df$g_group, e_group = dat$df$e_group, v_group = dat$df$v_group,
alphaG = rep(1,G1), alphaE = rep(1,G2), alphaV = rep(1,G3))
# Choose the parameters to watch
model_parameters <- c("g", "e", "v" ,"gen", "env", "vari" , "piG", "piE", "mu_env", "mu_gen", "mu", "sigma", "sgroup")
# Run the model
model_run <- jags(
data = model_data,
parameters.to.save = model_parameters,
model.file = textConnection(model_code)
)
# Results and output of the simulated example
plot(model_run)
rm(list = ls())
generateBlin <- function(index, Q, stheta = 1){
theta <- matrix(NA, nrow = index, ncol = Q)
variable <- matrix(NA, nrow = index, ncol = Q)
sqrtTheta <-  vector()
for(q in 1:Q){
for (i in 1:index) {
theta[i,q] <- rnorm(1, 0, stheta)
}
#theta[index, q] <- -sum(theta[1:(index-1), q])
m <- apply(theta, 2, mean)
thetaN <- as.matrix(apply(theta, 1, function(x){x-m}))
if(Q>1){
thetaN <- t(thetaN)
}
sqrtTheta[q] <- sqrt(1/sum(thetaN[,q]^2))
for (i in 1:index) {
variable[i,q] <- (thetaN[i,q])*sqrtTheta[q]
}
}
return(variable)
}
genData <- function(N, G, I, muT, sigma, sg, se, st, lambda){
Q <- length(lambda)
g <- rnorm(I, 0, sg)
e <- rnorm(G, 0, se)
gen <- rep(1:I, each = N/I)
# cluster membership
env <- sample(1:G, size = N, replace = TRUE)
# generate lambda, gamma, delta and kappa
gamma <- generateBlin(I, Q)
delta <- generateBlin(G, Q)
# generate bilinear term
blin <- rep(0, N)
for (k in 1:length(lambda)) {
blin <- blin + lambda[k] * gamma[gen, k] * delta[env, k]
}
# generate mean of the model
mu_y <- g[gen] + e[env] + blin
y <- rnorm(N, mu_y, sigma)
t <- rnorm(N, muT[env], st)
df <- data.frame(y = y, env = env, gen = gen, t = t, blin = blin)
return(list(df = df, g = g, e = e, Q = Q))
}
G <- 3
N <- 100
muT <- c(-5, 10, 30)
sigma <- 1
sg <- 10
se <- 10
st <- 1
I <- 5
lambda <- 10
set.seed(02)
dat <- genData(N = N, G = G, muT = muT, sigma = sigma, I = I, sg = sg, se = se, st = st, lambda = lambda)
hist(dat$df$t, breaks = 30, freq = FALSE)
for (g in 1:G) curve(dnorm(x, mean = muT[g], sd = st)/G, col = g, add = TRUE)
model_code <- '
model {
# Likelihood
for (i in 1:N) {
# Model for phenotype
y[i] ~ dnorm(mu[i], sigma^-2)
mu[i] = g[gen[i]] + e[env[i]] + blin[i] # Note that env here is a parameter but gen is not
blin[i] = sum(lambda[1:Q] * gamma[gen[i],1:Q] * delta[env[i],1:Q])
# Clustering model
env[i] ~ dcat(pi[1:G])
# Continuous environmental variable
t[i] ~ dnorm(mu_env[env[i]], st^-2)
}
# Priors
# Prior on cluster membership
pi ~ ddirch(alpha)
for (g in 1:G) {
mu_env_raw[g] ~ dnorm(0, 100^-2)
}
# Make sure these are in order to avoid label switching
mu_env <- sort(mu_env_raw[1:G])
# Prior on genotype effect
for(i in 1:I) {
g[i] ~ dnorm(0, sigma_g^-2) # Prior on genotype effect
}
for(i in 1:G) {
e[i] ~ dnorm(0, sigma_e^-2) # Prior on genotype effect
}
# Priors on gamma
for(q in 1:Q){
for(i in 1:I){
thetaG[i,q] ~ dnorm(0,1)
}
mG[q] = sum(thetaG[1:I,q])/I
for(i in 1:I){
thetaGNew[i,q] = thetaG[i,q] - mG[q]
}
sqrtThetaG[q] = sqrt(1/(sum(thetaGNew[1:I,q]^2 + 0.000001)))
for(i in 1:I){
gamma[i,q] = thetaGNew[i,q]*sqrtThetaG[q]
}
}
# Priors on delta
for(q in 1:Q){
for(j in 1:G){
thetaD[j,q] ~ dnorm(0,1)
}
mD[q] = sum(thetaD[1:G,q])/G
for(j in 1:G){
thetaDNew[j,q] = thetaD[j,q] - mD[q]
}
sqrtThetaD[q] = sqrt(1/(sum(thetaDNew[1:G,q]^2+ 0.000001)))
for(j in 1:G){
delta[j,q] = thetaDNew[j,q]*sqrtThetaD[q]
}
}
# Prior on eigenvalues
for(q in 1:Q) {
lambda_raw[q] ~ dnorm(0, 100^-2)T(0,)
}
lambda = sort(lambda_raw)
sigma ~ dt(0, 10^-2, 1)T(0,)
st ~ dt(0, 10^-2, 1)T(0,)
sigma_e ~ dt(0, 10^-2, 1)T(0,)
sigma_g ~ dt(0, 10^-2, 1)T(0,)
}
'
# Set up the data
model_data <- list(N = N, y = dat$df$y, G = G, I = I, gen = dat$df$gen, Q = dat$Q,
t = dat$df$t, alpha = rep(1,G))
# Choose the parameters to watch
model_parameters <- c("g", "e", "env", "pi", "mu_env", "mu", "sigma", "st", "blin")
# Run the model
model_run <- jags(
data = model_data,
parameters.to.save = model_parameters,
model.file = textConnection(model_code)
)
# Results and output of the simulated example
plot(model_run)
# Plot the posterior cluster membership
qplot(model_run$BUGSoutput$median$env, dat$df$env) +
geom_jitter(width = 0.1, height = 0.1)
# Overall predictions
qplot(model_run$BUGSoutput$median$mu, dat$df$y) + geom_abline()
# Prediction of genotype effects
qplot(model_run$BUGSoutput$median$g, dat$g) + geom_abline()
# Prediction of environment effects
qplot(model_run$BUGSoutput$median$e, dat$e) + geom_abline()
# Prediction of interactio effect
qplot(model_run$BUGSoutput$median$blin, dat$df$blin) + geom_abline() + theme_light()
# Plot the posterior cluster membership
qplot(model_run$BUGSoutput$median$env, dat$df$env) +
geom_jitter(width = 0.1, height = 0.1)
# Prediction of genotype effects
qplot(model_run$BUGSoutput$median$g, dat$g) + geom_abline()
# Prediction of interactio effect
qplot(model_run$BUGSoutput$median$blin, dat$df$blin) + geom_abline() + theme_light()
